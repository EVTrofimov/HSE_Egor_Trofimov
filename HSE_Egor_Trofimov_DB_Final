### Data Bases Final Work by Egor Trofimov --- 12/21/2024 --- PostgreSQL

# отчёт и SQL-файл со структурой базы

# СОЗДАЕМ ТАБЛИЦЫ С АТРИБУТАМИ

# устанавливаем суррогатные первичные ключи (автоинкременты):
    # в таблице students - id_student
    # в таблице teachers - id_teacher
    # в таблице courses - id_course
    # в таблице scores - id_score
# устанавливаем отношения между таблицами и внешние ключи:
    # в таблице students - внешний ключ references groups(id_group)
    # в таблице courses - внешние ключи courses_type(id_courses_type), teachers(id_teacher)
    # в таблице scores - внешние ключи courses(id_student), courses(id_course)
# создаем ограничения на атрибуты:
    # Date_Value в таблицах students, teachers - от 1 января 1901 до текущей даты
    # Date_Value в таблице courses: для course_start - от 1 января 1901, для course_final - интервал от 1 дня до 1 года
    # Year_Value в таблице courses - от 1 до 6
    # Score_Value в таблице score - от 2 до 5
# создаем ограничения уникальности must_be_different для ненулевых столбцов, групп столбцов - во избежание дублирования строк:
    # в таблице groups - для столбца name_group
    # в таблице students - для группы столбцов name_student, dob_student, email_student
    # в таблице teachers - для группы столбцов name_teacher, dob_teacher, email_teacher
    # в таблице courses_type - для столбца name_courses_type
    # в таблице courses - для группы столбцов name_course, id_teacher, year_of_study, course_start, course_final
# создаем ограничения уникальности must_be_different в таблице scores
    # для группы столбцов id_student, id_course - во избежание противоречивых записей об оценках

CREATE TABLE groups (
    id_group INT PRIMARY KEY,
    name_group CHARACTER VARYING(128) NOT NULL UNIQUE
);

CREATE TABLE students (
    id_student INT PRIMARY KEY,
    name_student CHARACTER VARYING(128) NOT NULL,
    dob_student DATE CONSTRAINT NOT NULL Date_Value CHECK (dob_student BETWEEN DATE '1901-01-01' AND CURRENT_DATE),
    email_student CHARACTER VARYING(128) NOT NULL,
    id_group NOT NULL references groups(id_group),
    CONSTRAINT must_be_different UNIQUE(name_student, dob_student, email_student)
);

CREATE TABLE teachers (
    id_teacher INT PRIMARY KEY,
    name_teacher CHARACTER VARYING(128) NOT NULL,
    dob_teacher DATE NOT NULL CONSTRAINT Date_Value CHECK (dob_teacher BETWEEN DATE '1901-01-01' AND CURRENT_DATE),
    email_teacher CHARACTER VARYING(128) NOT NULL,
    CONSTRAINT must_be_different UNIQUE(name_teacher, dob_teacher, email_teacher)
);

CREATE TABLE courses_type (
    id_courses_type INT PRIMARY KEY,
    name_courses_type CHARACTER VARYING(128) NOT NULL UNIQUE
);

CREATE TABLE courses (
    id_course INT PRIMARY KEY,
    name_course CHARACTER VARYING(128) NOT NULL,
    id_courses_type INT NOT NULL references courses_type(id_courses_type), 
    id_teacher INT NOT NULL references teachers(id_teacher),
    year_of_study SMALLINT NOT NULL CONSTRAINT Year_Value CHECK (year_of_study BETWEEN 1 AND 6), 
    course_start DATE NOT NULL CONSTRAINT Date_Value CHECK (course_start >= DATE '1901-01-01'),
    course_final DATE NOT NULL CONSTRAINT Date_Value CHECK ((course_final - course_start) BETWEEN INTERVAL '1 day' AND INTERVAL '1 year',
    CONSTRAINT must_be_different UNIQUE(name_course, id_teacher, year_of_study, course_start, course_final)
);

CREATE TABLE scores (
    id_score INT PRIMARY KEY,
    id_student INT NOT NULL references students(id_student),
    id_course INT NOT NULL references courses(id_course),
    score_date DATE CONSTRAINT Date_Value CHECK (score_date BETWEEN DATE '1901-01-01' AND CURRENT_DATE),
    score SMALLINT CONSTRAINT Score_Value CHECK (score BETWEEN 2 AND 5),
    CONSTRAINT must_be_different UNIQUE(id_student, id_course)
);

# СОЗДАЕМ ТРИГГЕРЫ НА УДАЛЕНИЕ СТРОК - УДАЛЕЛЕНИЯ КОРРЕЛЯТОВ В ДРУИХ ТАБЛИЦАХ ДЛЯ ПРЕДОТВРАЩЕНИЯ НЕКОРРЕКТНЫХ ЗАПИСЕЙ

# триггер на удаление строки в таблице groups - с удалением коррелирующих строк в таблице students
CREATE TRIGGER delete_group AFTER DELETE ON groups FOR EACH ROW
    DELETE FROM students WHERE id_group = OLD.id_group;

# триггер на удаление строки в таблице students - с удалением коррелирующих строк в таблице scores
CREATE TRIGGER delete_student AFTER DELETE ON students FOR EACH ROW
    DELETE FROM scores WHERE id_student = OLD.id_student;

# триггер на удаление строки в таблице teachers - с удалением коррелирующих строк в таблице courses
CREATE TRIGGER delete_teacher AFTER DELETE ON teachers FOR EACH ROW
    DELETE FROM courses WHERE id_teacher = OLD.id_teacher;

# триггер на удаление строки в таблице courses_type - с удалением коррелирующих строк в таблице courses
CREATE TRIGGER delete_course_type AFTER DELETE ON courses_type FOR EACH ROW
    DELETE FROM courses WHERE id_courses_type = OLD.id_courses_type;

# триггер на удаление строки в таблице courses - с удалением коррелирующих строк в таблице scores
CREATE TRIGGER delete_course AFTER DELETE ON teachers FOR EACH ROW
    DELETE FROM scores WHERE id_course = OLD.id_course;

# СОЗДАЕМ ПРОЦЕДУРЫ

# процедура запроса к базе данных - возможность выводить список студентов по определённому предмету
CREATE PROCEDURE get_students_on_course(IN idcourse INT)
BEGIN
    SELECT students.id_student, students.name_student FROM students
    JOIN SELECT scores.id_student FROM scores WHERE id_course = idcourse
    ON students.id_student = scores.id_student;
END

# процедура запроса к базе данных - возможность выводить список предметов, которые преподает конкретный преподаватель
CREATE PROCEDURE get_courses_of_teacher(IN idteacher INT)
BEGIN
    SELECT * FROM courses WHERE id_teacher = idteacher;
END

# процедура запроса к базе данных - возможность выводить средний балл студента по всем предметам
CREATE PROCEDURE get_avg_score_of_student(IN idstudent INT)
BEGIN
    SELECT AVG(score) FROM scores WHERE score IS NOT NULL AND id_student = idstudent;
END

# процедура запроса к базе данных - возможность выводить рейтинг преподавателей по средней оценке студентов




# процедура запроса к базе данных - возможность выводить список преподавателей, которые преподавали более 3 предметов за последний год
CREATE PROCEDURE get_teachers_more_3_courses_last_year()
BEGIN
    SELECT * FROM teachers
    JOIN SELECT * FROM courses WHERE id_teacher IN (SELECT id_teacher
        FROM (SELECT * FROM courses
        WHERE ((course_final + INTERVAL '1 year') > CURENT_DATE))
        GROUP BY id_teacher HAVING COUNT(*) > 3)
    ON teachers.id_teacher = courses.id_teacher;
END

# процедура запроса к базе данных - возможность выводить список студентов, которые имеют средний балл
    # выше 4 по математическим предметам, но ниже 3 по гуманитарным
    # примечание: считаем, что математические имеют id_courses_type=1, а гуманитарные - id_courses_type=2 
CREATE PROCEDURE get_students_with_more4_in_math_and_less3_in_human()
BEGIN
    SELECT * FROM students
    JOIN
    (SELECT id_student FROM
        ((SELECT id_course FROM courses WHERE id_courses_type = 1)
        JOIN
        (SELECT id_student, id_course, score FROM scores)
        ON courses.id_course = scores.id_course
        GROUP BY id_course HAVING AVG(score) > 4)
    JOIN
    SELECT id_student FROM
        ((SELECT id_course FROM courses WHERE id_courses_type = 2)
        JOIN
        (SELECT id_student, id_course, score FROM scores)
        ON courses.id_course = scores.id_course
        GROUP BY id_course HAVING AVG(score) < 3));
END

# процедура запроса к базе данных - возможность определить предметы, по которым больше всего двоек в текущем семестре



# процедура запроса к базе данных - возможность выводить студентов, которые получили высший балл по всем своим экзаменам,
    # и преподавателей, которые вели эти предметы



# процедура запроса к базе данных - возможность просматривать изменение среднего балла студента по годам обучения

# процедура запроса к базе данных - возможность определить группы, в которых средний балл выше, чем в других,
    # по аналогичным предметам, чтобы выявить лучшие методики преподавания или особенности состава группы

# процедура запроса к базе данных - вставка записи о новом студенте с его личной информацией,
    # такой как ФИО, дата рождения, контактные данные и др.

# процедура запроса к базе данных - обновление контактной информации преподавателя,
    # например, электронной почты или номера телефона, на основе его идентификационного номера или ФИО

# процедура запроса к базе данных - удаление записи о предмете, который больше не преподают в учебном заведении



# процедура запроса к базе данных - вставка новой записи об оценке, выставленной студенту по определённому предмету,
    # с указанием даты, преподавателя и полученной оценки




# ЗАПОЛНЯЕМ ТАБЛИЦЫ СТРОКАМИ

INSERT INTO students (name_student, dob_student, email_student)
  VALUES ('Ivan Ivanov', '2000-01-01', 'ivan@mail.ru'),
  ('Peter Petrov', '2000-02-02', 'peter@mail.ru'),
  ('Vasiliy Vasiliev', '2000-03-03', 'vasiliy@mail.ru')
;

INSERT INTO teachers (name_teacher, dob_teacher, email_teacher)
  VALUES ('Boris Borisov', '1980-01-01', 'boris@mail.ru'),
  ('Maria Markova', '1981-01-01', 'maria@mail.ru'),
  ('Sergey Sergeev', '1982-01-01', 'sergey@mail.ru')
;

INSERT INTO courses (name_course, id_teacher)
  VALUES ('Data Bases', 1),
  ('Information Systems', 2),
  ('Machine Learning', 3)
;

INSERT INTO scores (id_student, id_course, score)
  VALUES (1, 1, 3),
  (1, 2, 4),
  (1, 3, 5),
  (2, 1, 3),
  (2, 2, 4),
  (2, 3, 5),
  (3, 1, 4),
  (3, 2, 4),
  (3, 3, 4)
;


